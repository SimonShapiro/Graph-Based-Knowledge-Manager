'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactClass = require('react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _join = require('src/utils/join');

var _join2 = _interopRequireDefault(_join);

var _Row = require('./Row');

var _Row2 = _interopRequireDefault(_Row);

var _Column = require('src/Column');

var _Column2 = _interopRequireDefault(_Column);

var _getColumnsWidth = require('src/utils/getColumnsWidth');

var _getColumnsWidth2 = _interopRequireDefault(_getColumnsWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColumnGroup = function (_Component) {
  _inherits(ColumnGroup, _Component);

  function ColumnGroup() {
    _classCallCheck(this, ColumnGroup);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ColumnGroup).apply(this, arguments));
  }

  _createClass(ColumnGroup, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var offsetTop = props.offsetTop;
      var scrollTop = props.scrollTop;
      var viewportHeight = props.viewportHeight;
      var width = props.width;
      var height = props.height;
      var chilren = props.chilren;
      var fixed = props.fixed;

      var style = (0, _objectAssign2.default)({}, style, {
        height: height,
        transform: 'translateY(' + offsetTop + 'px)'
      });

      var columns = undefined;
      if (chilren) {
        columns = chilren;
      } else {
        columns = props.columns.map(function (column) {
          return _react2.default.createElement(_Column2.default, column);
        });
      }

      if (width) {
        style.width = width;
      }

      var minWidth = (0, _getColumnsWidth2.default)(columns);

      // Fixed means that it is not allowed to have horizontal scroll
      if (fixed) {
        style.minWidth = minWidth;
      }

      var className = (0, _join2.default)('react-datagrid__colum-group', props.className);

      return _react2.default.createElement(
        'div',
        _extends({}, props, {
          className: className,
          style: style,
          data: null,
          onScroll: function onScroll(ev) {
            return ev.stopPropagation();
          }
        }),
        this.renderRows(columns, minWidth)
      );
    }
  }, {
    key: 'renderRows',
    value: function renderRows(columns, minWidth) {
      var props = this.props;
      var data = props.data;
      var from = props.from;
      var to = props.to;
      var rowHeight = props.rowHeight;
      var globalProps = props.globalProps;

      if (Array.isArray(data) && data.length === 0) {
        return _react2.default.createElement(EmptyText, { emptyText: this.props.emptyText });
      }

      return data.slice(from, to).map(function (rowData, index) {
        var id = 'row-' + rowData[globalProps.idProperty];
        var even = !!(index % 2);
        var rowProps = (0, _objectAssign2.default)({
          columns: columns,
          minWidth: minWidth,
          index: index,
          even: even,
          key: id,
          data: rowData,
          renderRow: props.renderRow,
          rowFactory: props.rowFactory,
          rowStyle: props.rowStyle
        }, props.rowProps);

        return _react2.default.createElement(_Row2.default, rowProps);
      });
    }
  }]);

  return ColumnGroup;
}(_reactClass2.default);

exports.default = ColumnGroup;

ColumnGroup.propTypes = {
  children: function children(props, propName) {
    var children = props[propName];

    _react2.default.Children.map(children, function (child) {
      if (!child || !child.props || !child.props.isColumn) {
        return new Error('The only children allowed of Datagrid are ColumnGroup');
      }
    });
  }
};

ColumnGroup.defaultProps = {
  isColumnGroup: true
};