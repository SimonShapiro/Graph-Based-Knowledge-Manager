'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactClass = require('react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _reactFlex = require('react-flex');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _join = require('src/utils/join');

var _join2 = _interopRequireDefault(_join);

var _Cell = require('src/Cell');

var _Cell2 = _interopRequireDefault(_Cell);

var _getColumnsWidth = require('src/utils/getColumnsWidth');

var _getColumnsWidth2 = _interopRequireDefault(_getColumnsWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Row = function (_Component) {
  _inherits(Row, _Component);

  function Row() {
    _classCallCheck(this, Row);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Row).apply(this, arguments));
  }

  _createClass(Row, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var rowHeight = props.rowHeight;
      var data = props.data;
      var columns = props.columns;
      var minWidth = props.minWidth;

      var className = (0, _join2.default)('react-datagrid__row', props.even && 'react-datagrid__row--even', !props.even && 'react-datagrid__row--odd', props.className);

      var style = (0, _objectAssign2.default)({}, props.style, {
        height: rowHeight,
        minWidth: minWidth
      });

      if (props.rowStyle) {
        if (typeof props.rowStyle === 'function') {
          style = props.rowStyle(data, props);
        } else {
          style = (0, _objectAssign2.default)(style, props.rowStyle);
        }
      }

      var rowProps = (0, _objectAssign2.default)({}, props, {
        className: className,
        style: style,
        children: this.renderRow(data, columns)
      });

      var row = undefined;
      if (props.renderRow) {
        row = props.renderRow(rowProps);
      }

      if (row === undefined) {
        row = _react2.default.createElement(_reactFlex.Flex, _extends({ wrap: false }, rowProps, { data: null }));
      }

      return row;
    }
  }, {
    key: 'renderRow',
    value: function renderRow(data, columns) {
      var lastIndex = columns.length - 1;
      return columns.map(function (column, index) {
        var columnProps = column.props;
        var name = columnProps.name;

        // column.name can be ommited if it has a render method

        var key = name + '-' + index || index;
        var isFirst = index === 0;
        var isLast = index === lastIndex;
        var value = data[name];

        return _react2.default.createElement(_Cell2.default, _extends({}, columnProps, {
          data: data,
          key: key,
          first: isFirst,
          last: isLast,
          value: value
        }));
      });
    }
  }]);

  return Row;
}(_reactClass2.default);

exports.default = Row;

Row.propTypes = {
  renderRow: _react.PropTypes.func,
  rowProps: _react.PropTypes.object
};