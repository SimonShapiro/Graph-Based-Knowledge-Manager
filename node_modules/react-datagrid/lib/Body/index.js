'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactClass = require('react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _reactFlex = require('react-flex');

var _getDataRangeToRender2 = require('./getDataRangeToRender');

var _getDataRangeToRender3 = _interopRequireDefault(_getDataRangeToRender2);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _join = require('src/utils/join');

var _join2 = _interopRequireDefault(_join);

var _EmptyText = require('./EmptyText');

var _EmptyText2 = _interopRequireDefault(_EmptyText);

var _Scroller = require('./Scroller');

var _Scroller2 = _interopRequireDefault(_Scroller);

var _ColumnGroup = require('./ColumnGroup');

var _ColumnGroup2 = _interopRequireDefault(_ColumnGroup);

var _reactNotifyResize = require('react-notify-resize');

var _reactNotifyResize2 = _interopRequireDefault(_reactNotifyResize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Body = function (_Component) {
  _inherits(Body, _Component);

  function Body(props) {
    _classCallCheck(this, Body);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Body).call(this, props));

    _this.state = {
      bodyHeight: 0,
      scrollTop: 0
    };
    return _this;
  }

  _createClass(Body, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setBodyHeight();
    }

    // todo func getBodyHeight

  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var data = props.data;
      var columns = props.columns;
      var loading = props.loading;

      var className = (0, _join2.default)('react-datagrid__body');

      return _react2.default.createElement(
        _reactFlex.Item,
        _extends({}, props, {
          flex: true,
          column: true,
          className: className,
          data: null,
          ref: 'body'
        }),
        props.resizeTool,
        !loading && this.renderScroller()
      );
    }
  }, {
    key: 'renderScroller',
    value: function renderScroller() {
      var props = this.props;
      var data = props.data;
      var rowHeight = props.rowHeight;
      var contentHeight = props.contentHeight;

      if (!data) {
        console.error('Something went wrong with dataSource, most likely loading prop is set to false, and promise did not resolve');
        return;
      }

      return _react2.default.createElement(
        _Scroller2.default,
        {
          contentHeight: contentHeight,
          onScroll: this.onScroll,
          ref: 'scroller'
        },
        this.renderColumnGroups()
      );
    }
  }, {
    key: 'renderColumnGroups',
    value: function renderColumnGroups() {
      var props = this.props;
      var data = props.data;
      var columns = props.columns;
      var rowHeight = props.rowHeight;
      var contentHeight = props.contentHeight;

      var bodyHeight = this.state.bodyHeight;
      var scrollTop = this.state.scrollTop;

      var _getDataRangeToRender = (0, _getDataRangeToRender3.default)(bodyHeight, rowHeight, scrollTop);

      var from = _getDataRangeToRender.from;
      var to = _getDataRangeToRender.to;

      var offsetTop = from * rowHeight;
      var columnGrupHeight = bodyHeight + (scrollTop - offsetTop);

      var columnGroupProps = {
        data: data,
        offsetTop: offsetTop,
        scrollTop: scrollTop,
        rowHeight: rowHeight,
        from: from,
        to: to,
        viewportHeight: bodyHeight,
        globalProps: props,
        height: columnGrupHeight
      };

      /**
       * If no coumnGroup is specified, create a ColumGroup with all passed columns
       */
      if (!props.children) {
        return _react2.default.createElement(_ColumnGroup2.default, _extends({}, columnGroupProps, {
          columns: columns,
          width: '100%'
        }));
      } else {
        /**
         * Children are specified, take each Columngroup and insert props
         */
        return _react2.default.Children.map(props.children, function (child, index) {
          return _react2.default.cloneElement(child, (0, _objectAssign2.default)({}, child.props, columnGroupProps, { key: index }));
        });
      }
    }
  }, {
    key: 'onScroll',
    value: function onScroll(scrollTop, event) {
      this.setState({
        scrollTop: scrollTop
      });

      if (this.props.onScroll) {
        this.props.onScroll(scrollTop, event);
      }
    }
  }, {
    key: 'onResize',
    value: function onResize() {
      this.setBodyHeight();
    }
  }, {
    key: 'setBodyHeight',
    value: function setBodyHeight() {
      var bodyNode = (0, _reactDom.findDOMNode)(this.refs.body);
      var bodyHeight = undefined;

      if (bodyNode) {
        bodyHeight = bodyNode.offsetHeight;
      } else {
        bodyHeight = 0;
      }

      this.setState({
        bodyHeight: bodyHeight
      });
    }
  }]);

  return Body;
}(_reactClass2.default);

Body.defaultProps = {
  rowHeight: 40
};

Body.propTypes = {
  loading: _react.PropTypes.bool,
  onScroll: _react.PropTypes.func
};

exports.default = (0, _reactNotifyResize2.default)(Body);