'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactClass = require('react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _join = require('src/utils/join');

var _join2 = _interopRequireDefault(_join);

var _humanize = require('src/utils/humanize');

var _humanize2 = _interopRequireDefault(_humanize);

var _reactFlex = require('react-flex');

var _Cell = require('src/Cell');

var _Cell2 = _interopRequireDefault(_Cell);

var _getColumnsWidth = require('src/utils/getColumnsWidth');

var _getColumnsWidth2 = _interopRequireDefault(_getColumnsWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColumnGroupHeader = function (_Component) {
  _inherits(ColumnGroupHeader, _Component);

  function ColumnGroupHeader() {
    _classCallCheck(this, ColumnGroupHeader);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ColumnGroupHeader).apply(this, arguments));
  }

  _createClass(ColumnGroupHeader, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var width = props.width;
      var columns = props.columns;

      var className = (0, _join2.default)('react-datagrid__header__colum-group', props.className);
      var style = (0, _objectAssign2.default)({}, props.style);

      var minWidth = (0, _getColumnsWidth2.default)(columns);

      if (width) {
        style.width = Math.max(width, minWidth);
      }

      if (minWidth) {
        style.minWidth = minWidth;
      }

      return _react2.default.createElement(
        _reactFlex.Flex,
        _extends({}, props, {
          wrap: false,
          className: className,
          data: null,
          style: style
        }),
        this.renderColumns(columns)
      );
    }
  }, {
    key: 'renderColumns',
    value: function renderColumns(columns) {
      return columns.map(function (column, index) {
        var columnProps = column.props;
        var name = columnProps.name;
        var title = columnProps.title;

        var value = undefined;
        if (title) {
          value = title;
        } else {
          value = (0, _humanize2.default)(name);
        }

        return _react2.default.createElement(_Cell2.default, _extends({ column: true, key: index }, columnProps, { value: value }));
      });
    }
  }]);

  return ColumnGroupHeader;
}(_reactClass2.default);

exports.default = ColumnGroupHeader;

ColumnGroupHeader.defaultProps = {
  isColumnGroup: true
};